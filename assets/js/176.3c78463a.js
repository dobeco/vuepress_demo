(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{465:function(_,v,e){"use strict";e.r(v);var t=e(0),i=Object(t.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h1",{attrs:{id:"git命令大全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git命令大全"}},[_._v("#")]),_._v(" git命令大全")]),_._v(" "),e("h2",{attrs:{id:"一、基础命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、基础命令"}},[_._v("#")]),_._v(" 一、基础命令")]),_._v(" "),e("h3",{attrs:{id:"_1-1-获取git仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-获取git仓库"}},[_._v("#")]),_._v(" 1.1 获取Git仓库")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("git init")]),_._v(" 初始化仓库")]),_._v(" "),e("li",[e("code",[_._v("git clone <url>")]),_._v(" 克隆现有仓库")])]),_._v(" "),e("h3",{attrs:{id:"_1-2-修改与提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-修改与提交"}},[_._v("#")]),_._v(" 1.2 修改与提交")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("git status")]),_._v(" 检查当前文件状态")]),_._v(" "),e("li",[e("code",[_._v("git add .")]),_._v(" 跟踪所有件(添加到暂存区)")]),_._v(" "),e("li",[e("code",[_._v("git add <文件>")]),_._v(" 跟踪指定新文件(添加到暂存区)")]),_._v(" "),e("li",[e("code",[_._v("git diff")]),_._v(" 命令。查看已暂存和未暂存的修改")]),_._v(" "),e("li",[e("code",[_._v("git diff --cached")]),_._v("查看已暂存的将要添加到下次提交里的内容")]),_._v(" "),e("li",[e("code",[_._v("git diff dev master")]),_._v(" 比较"),e("code",[_._v("dev")]),_._v("分支和"),e("code",[_._v("master")]),_._v("分支差异")]),_._v(" "),e("li",[e("code",[_._v('git commit -m "这里写你要提交的信息"')]),_._v(" 提交更新，提交暂存区所有文件")]),_._v(" "),e("li",[e("code",[_._v("git commit --amend")]),_._v(" 修改最后一次提交")]),_._v(" "),e("li",[e("code",[_._v("git commit -a")]),_._v(" 跳过使用暂存区域，加上"),e("code",[_._v("-a")]),_._v("选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤")]),_._v(" "),e("li",[e("code",[_._v("git rm -f <文件>")]),_._v(" 移除文件,加上"),e("code",[_._v("-f")]),_._v("参数表示强制删除")]),_._v(" "),e("li",[e("code",[_._v("git rm --cached <文件>")]),_._v(" 把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。")]),_._v(" "),e("li",[e("code",[_._v("git mv >old? <new>")]),_._v(" 移动文件（文件更名）")])]),_._v(" "),e("h3",{attrs:{id:"_1-3-查看提交历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-查看提交历史"}},[_._v("#")]),_._v(" 1.3 查看提交历史")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("git log")]),_._v(" 查看提交历史")]),_._v(" "),e("li",[e("code",[_._v("git log -p -2")]),_._v(" "),e("code",[_._v("-p")]),_._v(" 一个常用的选项是 -p，用来显示每次提交的内容差异。 "),e("code",[_._v("-2")]),_._v("显示最近两次提交")]),_._v(" "),e("li",[e("code",[_._v("git log --stat")]),_._v(" 看到每次提交的简略的统计信息,"),e("code",[_._v("--stat")]),_._v(" 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了")]),_._v(" "),e("li",[e("code",[_._v("git log --pretty=oneline")]),_._v(" 将每个提交放在一行显示")]),_._v(" "),e("li",[e("code",[_._v("git blame <文件>")]),_._v(" 以列表方式查看指定文件的提交历史")])]),_._v(" "),e("h3",{attrs:{id:"_1-4-撤销操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-撤销操作"}},[_._v("#")]),_._v(" 1.4 撤销操作")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("git commit --amend")]),_._v(" 有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 "),e("code",[_._v("--amend")]),_._v(" 选项的提交命令尝试重新提交")]),_._v(" "),e("li",[e("code",[_._v("git reset HEAD <文件>")]),_._v(" 取消暂存")]),_._v(" "),e("li",[e("code",[_._v("git checkout -- <文件>")]),_._v(" 撤消对文件的修改, 将它还原成上次提交时的样子（或者刚克隆完的样子，或者刚把它放入工作目录时的样子），这是个危险命令，你对那个文件做的任何修改都会消失 - 你只是拷贝了另一个文件来覆盖它。 除非你确实清楚不想要那个文件了，否则不要使用这个命令。")]),_._v(" "),e("li",[e("code",[_._v("git reset HEAD <file>")]),_._v(" 取消暂存区部分文件的更改")]),_._v(" "),e("li",[e("code",[_._v("git reset --hard <commit id>")]),_._v(" 代码回退到某个"),e("code",[_._v("commit")]),_._v("记录")])]),_._v(" "),e("h3",{attrs:{id:"_1-5-远程仓库操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-远程仓库操作"}},[_._v("#")]),_._v(" 1.5 远程仓库操作")]),_._v(" "),e("ul",[e("li",[e("p",[e("code",[_._v("git remote -v")]),_._v(" 查看远程版本库信息， "),e("code",[_._v("-v")]),_._v("，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL,如果拥有多个远程仓库，则会将它们全部列出")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("git remote add <自定义远程仓库别名> <url>")]),_._v(" 添加远程仓库，使用"),e("code",[_._v("clone")]),_._v("命令克隆一个仓库，远程仓库默认名称为“origin”，为什么要自定义别名呢？以为当一个本地仓库要推送到多个远程仓库时，不同的名称可以区分不同的远程仓库")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("git fetch <远程仓库>")]),_._v(" 拉取远程仓库中有但本地没有的代码,该命令不会自动合并或修改你当前的工作，需手动合并")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("git push [远程仓库] [推送分支]")]),_._v(" 推送到远程仓库,如"),e("code",[_._v("git push origin master")]),_._v("，推送到名为"),e("code",[_._v("origin")]),_._v("仓库的"),e("code",[_._v("master")]),_._v("分支上")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("git remote show [remote-name]")]),_._v(" 查看某一远程仓库的更多信息，如"),e("code",[_._v("git remote show origin")])])]),_._v(" "),e("li",[e("p",[e("code",[_._v("git remote rename <旧名> <新名>")]),_._v("远程仓库的移除与重命名")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("git remote rm <远程仓库>")]),_._v(" 移除一个远程仓库")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("git remote set-url origin [url]")]),_._v(" 修改远程仓库地址")])])]),_._v(" "),e("h3",{attrs:{id:"_1-6-标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-标签"}},[_._v("#")]),_._v(" 1.6 标签")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("git tag")]),_._v(" 列出标签")]),_._v(" "),e("li",[e("code",[_._v("git tag -a v1.0 -m '1.0版本'")]),_._v(" 创建标签,"),e("code",[_._v("v1.0")]),_._v("版本号， "),e("code",[_._v("-m")]),_._v(" 选项指定了一条将会存储在标签中的信息")]),_._v(" "),e("li",[e("code",[_._v("git show v1.0")]),_._v(" 查看"),e("code",[_._v("v1.0")]),_._v("标签信息与对应的提交信息")]),_._v(" "),e("li",[e("code",[_._v("git tag -a <tagname> <logId>")]),_._v(" 后期打标签,如在"),e("code",[_._v("v1.2")]),_._v("时忘记给项目打标签，可使用"),e("code",[_._v("git tag -a v1.2 9fceb02")]),_._v("命令补上,"),e("code",[_._v("9fceb02")]),_._v("为提交历史"),e("code",[_._v("id")])]),_._v(" "),e("li",[e("code",[_._v("git push origin <tagname>")]),_._v(" 推送标签到远端,如 "),e("code",[_._v("git push origin v2.1")]),_._v("，推送"),e("code",[_._v("v2.1")]),_._v("标签到"),e("code",[_._v("origin")]),_._v("仓库，如果要推送多个标签，添加"),e("code",[_._v("--tags")]),_._v("选项既可")]),_._v(" "),e("li",[e("code",[_._v("git tag -d <tagname>")]),_._v(" 删除本地标签")])]),_._v(" "),e("h2",{attrs:{id:"二、分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、分支"}},[_._v("#")]),_._v(" 二、分支")]),_._v(" "),e("h3",{attrs:{id:"_2-1-分支的新建与合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-分支的新建与合并"}},[_._v("#")]),_._v(" 2.1 分支的新建与合并")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("git checkout -b <分支名称>")]),_._v(" 新建分支，"),e("code",[_._v("-b")]),_._v("选项表示新建分支并同时切换带该分支上，如创建"),e("code",[_._v("dev")]),_._v("分支可使用"),e("code",[_._v("git checkout -b dev")]),_._v("命令")]),_._v(" "),e("li",[e("code",[_._v("git checkout <分支名称>")]),_._v("切换分支,如切换到"),e("code",[_._v("master")]),_._v("分支，"),e("code",[_._v("git checkout master")])]),_._v(" "),e("li",[e("code",[_._v("git branch")]),_._v(" 列出所有分支")]),_._v(" "),e("li",[e("code",[_._v("git merge <分支>")]),_._v(" 合并分支")]),_._v(" "),e("li",[e("code",[_._v("git branch -d <分支>")]),_._v(" 删除分支")]),_._v(" "),e("li",[e("code",[_._v("git rebase <分支>")])])]),_._v(" "),e("h3",{attrs:{id:"_2-2-分支管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-分支管理"}},[_._v("#")]),_._v(" 2.2 分支管理")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("git branch --merged")]),_._v(" 查看哪些分支已经合并到当前分支")]),_._v(" "),e("li",[e("code",[_._v("git branch --no-merged")]),_._v(" 查看所有包含未合并工作的分支")])]),_._v(" "),e("h3",{attrs:{id:"_2-3-远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-远程分支"}},[_._v("#")]),_._v(" 2.3 远程分支")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("git pull")]),_._v("跟踪分支，拉取远端代码覆盖本地。Git 能自动地识别去哪个服务器上抓取、合并到哪个分支")]),_._v(" "),e("li",[e("code",[_._v("git push origin --delete serverfix")]),_._v(" 删除远端分支，从服务器上删除 "),e("code",[_._v("serverfix")]),_._v(" 分支")]),_._v(" "),e("li",[_._v("拉取所有远程分支\n"),e("ul",[e("li",[_._v('git branch -r | grep -v \'->\' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done')]),_._v(" "),e("li",[_._v("git fetch --all")]),_._v(" "),e("li",[_._v("git pull --all")])])])]),_._v(" "),e("h3",{attrs:{id:"_2-4-变基"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-变基"}},[_._v("#")]),_._v(" 2.4 变基")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("git rebase --onto master server client")]),_._v(" 取出 "),e("code",[_._v("client")]),_._v(" 分支，找出处于 "),e("code",[_._v("client")]),_._v(" 分支和 "),e("code",[_._v("server")]),_._v(" 分支的共同祖先之后的修改，然后把它们在 "),e("code",[_._v("master")]),_._v(" 分支上重放一遍")]),_._v(" "),e("li",[e("code",[_._v("git rebase [basebranch] [topicbranch]")]),_._v(" 直接将特性分支变基到目标分支上，省去要切换到某个分支上，再对其执行变基命令的多个步骤，如将 "),e("code",[_._v("server")]),_._v(" 中的修改变基到"),e("code",[_._v("master")]),_._v(" 上"),e("code",[_._v("git rebase master server")]),_._v("，注意：不要对在你的仓库外有副本的分支执行变基")]),_._v(" "),e("li",[_._v("修改旧的"),e("code",[_._v("commit")]),_._v("的"),e("code",[_._v("message")]),_._v(" "),e("ol",[e("li",[e("code",[_._v("git rebase -i logid")])]),_._v(" "),e("li",[_._v("在弹出的编辑页面，将要修改的错误的commit message前面的“pick”改为“reword”，然后保存")]),_._v(" "),e("li",[_._v("保存后会再弹出一个编辑页面，将里面错误的commit message改为想要的，然后保存")]),_._v(" "),e("li",[e("code",[_._v("git push –force")])])])])]),_._v(" "),e("h2",{attrs:{id:"三、git工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、git工具"}},[_._v("#")]),_._v(" 三、Git工具")]),_._v(" "),e("h3",{attrs:{id:"_3-1-交互式暂存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-交互式暂存"}},[_._v("#")]),_._v(" 3.1 交互式暂存")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("git add -i")]),_._v(" 提供选项，选择要添加到暂存区的文件")])]),_._v(" "),e("h3",{attrs:{id:"_3-2-储藏与清理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-储藏与清理"}},[_._v("#")]),_._v(" 3.2 储藏与清理")]),_._v(" "),e("p",[_._v("有时，当你在项目的一部分上已经工作一段时间后，所有东西都进入了混乱的状态，而这时你想要切换到另一个分支做一点别的事情。 问题是，你不想仅仅因为过会儿回到这一点而为做了一半的工作创建一次提交。 针对这个问题的答案是 "),e("code",[_._v("git stash")]),_._v(" 命令。")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("git stash list")]),_._v(" 查看储藏的东西")]),_._v(" "),e("li",[e("code",[_._v("git stash apply")]),_._v(" 将刚刚储藏的工作重新应用，如果想要应用其中一个更旧的储藏，可以通过名字指定它，像这样："),e("code",[_._v("git stash apply stash@{2}")]),_._v("。 如果不指定一个储藏，Git 认为指定的是最近的储藏")]),_._v(" "),e("li",[e("code",[_._v("git clean")]),_._v(" 从工作目录中移除未被追踪的文件")])]),_._v(" "),e("h3",{attrs:{id:"_3-3-搜索"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-搜索"}},[_._v("#")]),_._v(" 3.3 搜索")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("git grep -n")])])]),_._v(" "),e("h3",{attrs:{id:"_3-4-重写历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-重写历史"}},[_._v("#")]),_._v(" 3.4 重写历史")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("git commit --amend")]),_._v(" 修改最后一次提交")]),_._v(" "),e("li",[e("code",[_._v("git rebase -i HEAD~3")]),_._v("修改多个提交信息，修改最后三次提交")])]),_._v(" "),e("h3",{attrs:{id:"_3-5-高级合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-高级合并"}},[_._v("#")]),_._v(" 3.5 高级合并")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("git merge --abort")]),_._v("中断一次合并")]),_._v(" "),e("li",[e("code",[_._v("git merge -Xignore-space-change whitespace")]),_._v(" 忽略空白")]),_._v(" "),e("li",[e("code",[_._v("git log --graph --oneline --decorate --all")]),_._v(" 检出冲突")]),_._v(" "),e("li",[e("code",[_._v("git log --oneline --left-right HEAD...MERGE_HEAD")]),_._v("合并日志")]),_._v(" "),e("li",[e("code",[_._v("git reset --hard HEAD~")]),_._v(" 修复引用")]),_._v(" "),e("li",[e("code",[_._v("git revert -m 1 HEAD")]),_._v(" 还原提交")])])])}),[],!1,null,null,null);v.default=i.exports}}]);